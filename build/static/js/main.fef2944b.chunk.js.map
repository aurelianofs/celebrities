{"version":3,"sources":["WebSocketAPI.js","screens/Welcome.js","screens/Lobby.js","screens/Game.js","App.js","serviceWorker.js","index.js"],"names":["HOST","window","location","origin","replace","savedPlayerID","localStorage","getItem","JSON","parse","WebSocketAPI","actions","onApiStateChange","ws","WebSocket","pingTimeout","keepAlive","readyState","OPEN","send","setTimeout","action","data","stringify","this","onopen","e","id","onmessage","evt","console","log","onclose","clearTimeout","Welcome","state","name","handleNameChange","target","value","setState","handleSubmit","preventDefault","props","setName","onSubmit","required","type","onChange","Component","Lobby","games","createGame","selectGame","map","g","i","key","host","onClick","Game","character","handleCharacterChange","assignCharacter","game","myId","startGame","leaveGame","me","players","find","p","myTarget","hostId","App","screen","availableGames","apiState","api","componentDidUpdate","prevProps","setItem","handleCreateGame","handleSelectGame","handleStartGame","handleLeaveGame","handleAssignCharacter","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fef2944b.chunk.js","sourcesContent":["let HOST = window.location.origin.replace(/^http/, 'ws');\n\nif(process.env.NODE_ENV === 'development') {\n  HOST = HOST.replace(':3000', ':8080');\n}\n\nconst savedPlayerID = localStorage && localStorage.getItem('playerID') ? JSON.parse(localStorage.getItem('playerID')) : null;\n\nclass WebSocketAPI {\n  ws = new WebSocket(HOST);\n  onApiStateChange = null;\n  pingTimeout = false;\n\n  constructor(actions, onApiStateChange) {\n    this.onApiStateChange = onApiStateChange;\n\n    this.ws.onopen = (e) => {\n      // on connecting, do nothing but log it to the console\n      this.onApiStateChange('connected');\n\n      this.keepAlive();\n\n      this.send('PLAYER_LOGIN', {\n        id: savedPlayerID ? savedPlayerID : null\n      });\n    }\n\n    this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      const { action, data } = JSON.parse(evt.data);\n\n      console.log(action, data);\n\n      if(actions[action]) actions[action](data);\n    }\n\n\n    this.ws.onclose = (e) => {\n      this.onApiStateChange('closed');\n      if(this.pingTimeout) clearTimeout(this.pingTimeout);\n    }\n  }\n\n  keepAlive = () => {\n    if (this.ws.readyState === this.ws.OPEN) {\n      this.send('PING', null);\n    }\n    this.pingTimeout = setTimeout(this.keepAlive, 20000);\n  }\n\n  send = (action, data) => {\n    this.ws.send(JSON.stringify({\n      action,\n      data\n    }));\n  }\n}\n\nexport default WebSocketAPI;","import React, { Component } from 'react';\n\nclass Welcome extends Component {\n  state = {\n    name: ''\n  }\n\n  handleNameChange = e => {\n    const name = e.target.value;\n    this.setState({name});\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name } = this.state;\n    this.props.setName(name);\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <div>\n        <h1>Welcome{ name ? ` ${name}` : '' }!</h1>\n        <form onSubmit={this.handleSubmit}>\n          <p>What's your name?</p>\n          <input required type=\"text\" value={name} onChange={this.handleNameChange} />\n          <button>Continue</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\n\nclass Lobby extends Component {\n  render() {\n    const { games, createGame, selectGame } = this.props;\n    return (\n      <div>\n        <h2>Choose your game</h2>\n        {games.map((g, i) => (\n          <div key={i}>\n            <h4>{ g.host }'s Game</h4>\n            <button onClick={() => {\n              selectGame(g.id);\n            }}>Join this game</button>\n          </div>\n        ))}\n        <button onClick={createGame}>Create new game</button>\n      </div>\n    )\n  }\n}\n\nexport default Lobby;","import React, { Component } from 'react';\n\nclass Game extends Component {\n  state = {\n    character: '',\n  }\n\n  handleCharacterChange = e => {\n    const character = e.target.value;\n    this.setState({character});\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.assignCharacter(this.state.character);\n    this.setState({character: ''});\n  }\n\n  render() {\n    const { game, myId, startGame, leaveGame } = this.props;\n    const me = game.players.find(p => p.id === myId);\n    const myTarget = game.players.find(p => p.id === me.target);\n    return (\n      <div>\n        <h2>Game: {game.id}</h2>\n        { myTarget && !myTarget.character ?\n          <form onSubmit={this.handleSubmit}>\n            <p>Give <strong>{myTarget.name}</strong> a character</p>\n            <input type=\"text\" value={this.state.character} onChange={this.handleCharacterChange} required />\n            <button>Send!</button>\n          </form>\n        : null }\n        <p>Connected Players:</p>\n        <ul>\n          {game.players.map(p => (\n            <li key={p.id}>\n              <strong>{p.name}</strong>\n              { p.character ?\n                <span> is <strong>{p.character}</strong></span>\n              : null }\n            </li>\n          ))}\n        </ul>\n        { game.hostId === myId ?\n          <button onClick={startGame}>Start Game</button>\n        : null }\n        <button onClick={leaveGame}>Leave Game</button>\n      </div>\n    )\n  }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport WebSocketAPI from './WebSocketAPI'\nimport Welcome from './screens/Welcome';\nimport Lobby from './screens/Lobby';\nimport Game from './screens/Game';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    id: null,\n    name: null,\n    game: null,\n    screen: null,\n    availableGames: [],\n    apiState: null,\n  }\n\n  api = new WebSocketAPI({\n    'PLAYER_LOGGED': data => {\n      this.setState({\n        id: data.id,\n        name: data.name,\n        game: data.game\n      });\n    },\n    'AVAILABLE_GAMES': data => {\n      this.setState({\n        availableGames: data.games\n      });\n    },\n    'GAME_UPDATE': data => {\n      this.setState({\n        game: data.game\n      });\n    }\n  }, state => {\n    this.setState({\n      apiState: state\n    });\n  });\n\n  componentDidUpdate = prevProps => {\n    if(localStorage) localStorage.setItem('playerID',  JSON.stringify(this.state.id));\n  }\n\n  onApiStateChange = state => {\n  }\n\n  handleNameChange = name => {\n    this.setState({name});\n    this.api.send('PLAYER_NAME', {name});\n  }\n\n  handleCreateGame = () => {\n    this.api.send('CREATE_GAME');\n  }\n\n  handleSelectGame = id => {\n    this.api.send('JOIN_GAME', {id});\n  }\n\n  handleStartGame = () => {\n    this.api.send('START_GAME');\n  }\n\n  handleLeaveGame = () => {\n    this.api.send('LEAVE_GAME');\n  }\n\n  handleAssignCharacter = character => {\n    this.api.send('ASSIGN_CHARACTER', {character});\n  }\n\n  render() {\n    const { id, name, availableGames, game, apiState } = this.state;\n    return (\n      <div className=\"App\">\n        <small>API Status: <strong>{apiState}</strong></small>\n        {\n          !name ? <Welcome setName={this.handleNameChange} /> :\n          !game ? <Lobby games={availableGames} createGame={this.handleCreateGame} selectGame={this.handleSelectGame} /> :\n          <Game myId={id} game={game} startGame={this.handleStartGame} leaveGame={this.handleLeaveGame} assignCharacter={this.handleAssignCharacter} />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}